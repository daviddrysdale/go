// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package rfc6979

import (
	"bytes"
	"crypto"
	"crypto/sha256"
	"math/big"
	"testing"
)

var (
	// Values from appendix A.1 of RFC6979.
	qData  = []byte{0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x08, 0xA2, 0xE0, 0xCC, 0x0D, 0x99, 0xF8, 0xA5, 0xEF}
	xData  = []byte{0x00, 0x9A, 0x4D, 0x67, 0x92, 0x29, 0x5A, 0x7F, 0x73, 0x0F, 0xC3, 0xF2, 0xB4, 0x9C, 0xBC, 0x0F, 0x62, 0xE8, 0x62, 0x27, 0x2F}
	uxData = []byte{0x07, 0x9A, 0xEE, 0x09, 0x0D, 0xB0, 0x5E, 0xC2, 0x52, 0xD5, 0xCB, 0x44, 0x52, 0xF3, 0x56, 0xBE, 0x19, 0x8A, 0x4F, 0xF9, 0x6F}
	uyData = []byte{0x07, 0x82, 0xE2, 0x96, 0x34, 0xDD, 0xC9, 0xA3, 0x1E, 0xF4, 0x03, 0x86, 0xE8, 0x96, 0xBA, 0xA1, 0x8B, 0x53, 0xAF, 0xA5, 0xA3}
	kData  = []byte{0x02, 0x3A, 0xF4, 0x07, 0x4C, 0x90, 0xA0, 0x2B, 0x3F, 0xE6, 0x1D, 0x28, 0x6D, 0x5C, 0x87, 0xF4, 0x25, 0xE6, 0xBD, 0xD8, 0x1B}
)

func TestInt2Octets(t *testing.T) {
	var tests = []struct {
		size int
		in   []byte
		want []byte
	}{
		{
			size: 3,
			in:   []byte{0x12, 0x34},
			want: []byte{0x00, 0x12, 0x34},
		},
		{
			size: 2,
			in:   []byte{0x12, 0x34},
			want: []byte{0x12, 0x34},
		},
		{
			size: 5,
			in:   []byte{0x12, 0x34},
			want: []byte{0x00, 0x00, 0x00, 0x12, 0x34},
		},
	}
	for _, test := range tests {
		in := new(big.Int).SetBytes(test.in)
		got := int2octets(in, test.size)
		if !bytes.Equal(test.want, got) {
			t.Errorf("int2octets(%s)=%x, want %x", in.String(), got, test.want)
		}
	}
}

func TestBits2Int(t *testing.T) {
	var tests = []struct {
		qlen int
		in   []byte
		want []byte
	}{
		{
			qlen: 8,
			in:   []byte{0xff},
			want: []byte{0xff},
		},
		{
			qlen: 16,
			in:   []byte{0x82, 0x81},
			want: []byte{0x82, 0x81},
		},
		{
			qlen: 32,
			in:   []byte{0x82, 0x81},
			want: []byte{0x82, 0x81},
		},
		{
			qlen: 12,
			in:   []byte{0x82, 0x81},
			want: []byte{0x08, 0x28},
		},
		{
			qlen: 9,
			in:   []byte{0x82, 0x81},
			want: []byte{0x01, 0x05},
		},
	}
	for _, test := range tests {
		want := new(big.Int).SetBytes(test.want)
		got := bits2int(test.qlen, test.in)
		if got.Cmp(want) != 0 {
			t.Errorf("bits2int(%d, %x)=%s, want %s", test.qlen, test.in, got.String(), want.String())
		}
	}
}

func TestBits2Octets(t *testing.T) {
	var tests = []struct {
		q    []byte
		in   []byte
		want []byte
	}{
		{
			q:    []byte{0xff},
			in:   []byte{0xff},
			want: []byte{0xff},
		},
		{
			q:    []byte{0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0xe6, 0xfa, 0xad, 0xa7, 0x17, 0x9e, 0x84, 0xf3, 0xb9, 0xca, 0xc2, 0xfc, 0x63, 0x25, 0x51},
			in:   []byte{0x81, 0x51, 0x32, 0x5d, 0xcd, 0xba, 0xe9, 0xe0, 0xff, 0x95, 0xf9, 0xf9, 0x65, 0x84, 0x32, 0xdb, 0xed, 0xfd, 0xb2, 0x09},
			want: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x51, 0x32, 0x5d, 0xcd, 0xba, 0xe9, 0xe0, 0xff, 0x95, 0xf9, 0xf9, 0x65, 0x84, 0x32, 0xdb, 0xed, 0xfd, 0xb2, 0x09},
		},
		{
			// From Appendix A.1 of RFC6979.
			q: qData,
			in: []byte{
				0xAF, 0x2B, 0xDB, 0xE1, 0xAA, 0x9B, 0x6E, 0xC1, 0xE2, 0xAD, 0xE1, 0xD6, 0x94, 0xF4, 0x1F, 0xC7,
				0x1A, 0x83, 0x1D, 0x02, 0x68, 0xE9, 0x89, 0x15, 0x62, 0x11, 0x3D, 0x8A, 0x62, 0xAD, 0xD1, 0xBF,
			},
			want: []byte{
				0x01, 0x79, 0x5E, 0xDF, 0x0D, 0x54, 0xDB, 0x76, 0x0F, 0x15, 0x6D, 0x0D, 0xAC, 0x04, 0xC0, 0x32,
				0x2B, 0x3A, 0x20, 0x42, 0x24,
			},
		},
	}
	for _, test := range tests {
		var q big.Int
		q.SetBytes(test.q)
		got := bits2octets(&q, test.in)
		if !bytes.Equal(got, test.want) {
			t.Errorf("bits2octets(%s, %x)=%x, want %x", q.String(), test.in, got, test.want)
		}
	}
}

func TestExampleGenerate(t *testing.T) {
	// Reproduce the step-by-step values in appendix A.1 of RFC6979.
	q := new(big.Int).SetBytes(qData)
	if got, want := q.BitLen(), 163; got != want {
		t.Errorf("qlen=%d, want %d", got, want)
	}
	x := new(big.Int).SetBytes(xData)

	msg := []byte("sample")
	wantH1 := []byte{
		0xAF, 0x2B, 0xDB, 0xE1, 0xAA, 0x9B, 0x6E, 0xC1, 0xE2, 0xAD, 0xE1, 0xD6, 0x94, 0xF4, 0x1F, 0xC7,
		0x1A, 0x83, 0x1D, 0x02, 0x68, 0xE9, 0x89, 0x15, 0x62, 0x11, 0x3D, 0x8A, 0x62, 0xAD, 0xD1, 0xBF,
	}
	h1 := sha256.Sum256(msg)
	if !bytes.Equal(h1[:], wantH1) {
		t.Errorf("sha256.Sum('sample')=%x, want %x", h1, wantH1)
	}

	g, err := NewGenerator(q, x, h1[:], crypto.SHA256)
	if err != nil {
		t.Fatalf("NewGenerator()=_,%v; want _,nil", err)
	}

	// Check the internal state of g.
	if !g.first {
		t.Errorf("g.first=%t, want true", g.first)
	}
	kStepF := []byte{
		0x0C, 0xF2, 0xFE, 0x96, 0xD5, 0x61, 0x9C, 0x9E, 0xF5, 0x3C, 0xB7, 0x41, 0x7D, 0x49, 0xD3, 0x7E,
		0xA6, 0x8A, 0x4F, 0xFE, 0xD0, 0xD7, 0xE6, 0x23, 0xE3, 0x86, 0x89, 0x28, 0x99, 0x11, 0xBD, 0x57,
	}
	if !bytes.Equal(g.k, kStepF) {
		t.Errorf("g.k=%x, want %x after step f/g", g.k, kStepF)
	}
	vStepG := []byte{
		0x78, 0x34, 0x57, 0xC1, 0xCF, 0x31, 0x48, 0xA8, 0xF2, 0xA9, 0xAE, 0x73, 0xED, 0x47, 0x2F, 0xA9,
		0x8E, 0xD9, 0xCD, 0x92, 0x5D, 0x8E, 0x96, 0x4C, 0xE0, 0x76, 0x4D, 0xEF, 0x3F, 0x84, 0x2B, 0x9A,
	}
	if !bytes.Equal(g.v, vStepG) {
		t.Errorf("g.k=%x, want %x after step f/g", g.k, vStepG)
	}

	// Candidate k values produced as per RFC6979 A.1.2.
	wantK := [][]byte{
		{0x04, 0x98, 0x2D, 0x23, 0x6F, 0x3F, 0xFC, 0x75, 0x88, 0x38, 0xCA, 0x6F, 0x5E, 0x9F, 0xEA, 0x45, 0x51, 0x06, 0xAF, 0x3B, 0x2B},
		{0x06, 0x38, 0x63, 0xC3, 0x04, 0x51, 0xDA, 0xDF, 0x49, 0x44, 0xDF, 0x48, 0x77, 0xB7, 0x40, 0xD4, 0xF1, 0x60, 0xA8, 0xB6, 0xAB},
		kData,
	}
	qlen := q.BitLen()
	for _, wantData := range wantK {
		var want big.Int
		want.SetBytes(wantData)
		got := g.generateOne(qlen)
		if got.Cmp(&want) != 0 {
			t.Errorf("Generate()=%v, want %v", got, want)
		}
	}
}
